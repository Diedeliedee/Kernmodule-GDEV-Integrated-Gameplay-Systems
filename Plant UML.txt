@startuml

class GameManager
{
  -tickManager: TickManager

  +Awake() : void
  +Start() : void
  +Update() : void
}

class TickManager
{
  -subscribed : List<IUpdatable> 
  +OnUpdate() : void
  +Add<T>(updatable : T) : T
}

interface IUpdatable

GameManager *-- TickManager
TickManager o.. IUpdatable

'Inventory System Base
interface IInventory
{
  +Add(itemStack : params ItemStack[]) : void
  +Remove(itemStack : params ItemStack[]) : void
  +Contains(itemStack : params ItemStack[]) : bool
}

struct ItemStack
{
  type : ItemData
  amount : int
}

class ItemData
{
  +image : Sprite
}

IInventory --> ItemStack
ItemStack *-- ItemData

'Grid Inventory System
class GridInventory extends IInventory
{
  -itemGrid : Tile[]
}

class Tile
{
  -contents : ItemStack
  +SetContents() : void
  +ChangeValue(amount : int) : void
}

class InventoryManager
{
  +inventory : GridInventory
}

class SlotElement
{
  -element : RectTransform
  -connectedTile : Tile
}

GridInventory *-- Tile
InventoryManager *-- SlotElement
SlotElement *-- Tile

'Interaction System
class InteractionManager
{
  
}

InventoryManager *-- GridInventory

@enduml
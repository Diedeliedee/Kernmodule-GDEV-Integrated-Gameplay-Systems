@startuml

class GameManager
{
  -serivceLocator : ServiceLocator
  -inventoryManager : InventoryManager
  -tickManager : TickManager
  +Awake() : void
  +Start() : void
  +Update() : void
}

package "Service Locator"
{
  class ServiceLocator
  {
    +Instance : ServiceLocator
    -services : Dictionary<Type, IService>
    +Add(service : IService, key : Type) : void
    +Remove(key : Type) : void
    +Get<T>() : void
  }
  
  interface IService
  
  GameManager *-- ServiceLocator
  ServiceLocator o.. IService
}

package "Tick System"
{
  interface ITickManager <<Service>> 
  {
    +Add(updatable : IUpdatable) : void
    +Remove(updatable : IUpdatable) : void
  }

  class TickManager implements ITickManager
  {
    -subscribedObjects : List<IUpdatable> 
    +OnStart() : void
    +OnUpdate() : void
    +OnFixedUpdate() : void
  }
  
  interface IUpdatable 
  {
    +OnStart() : void
    +OnUpdate() : void
    +OnFixedUpdate() : void
  }
  
  abstract class BaseInteractable
  
  GameManager *-- ITickManager
  TickManager o.. IUpdatable
  IUpdatable <-- BaseInteractable
}

package "Gathering System"
{
  interface IGatherManager <<Service>> 
  {
    +AddGatherComponent(gatherComponent : GatherComponent) : void
  }

  class GatherManager <<Updatable>> implements IGatherManager 
  {
    -inventory : IInventory
    -gatherInfo : GatherInfo
    -gatherComponents : List<gatherComponent>
  }

  class GatherInfo
  {
    +gatherItems : Dictionary<ItemData, GatherChance>
    +Decorate(gatherComponent : GatherComponent) : void
  }
  
  class GatherComponent <<ScriptableObject>> 
  {
    + gatherItems : Dictionary<ItemData, GatherChance>
  }
  
  
  struct GatherChance
  {
    +gatherChancePercentage : float
    +maxStackSize : int
  }
  
  GameManager *-- IGatherManager
  GatherManager *-- GatherInfo
  GatherManager *-- GatherComponent
  GatherInfo o-- GatherChance
  GatherComponent o-- GatherChance
}

package "Crafting System"
{
  class CraftingManager <<Updatable>>
  {
    -inventory : IInventory
    -gatherManager : IGatherManager
    -lockedRecipes : List<CraftingRecipe>
    -unlockedRecipes : List<CraftingRecipe>
    -craftingQueue : List<CraftingRecipe>
    -craftingQueueProgressSlider : Image
    -toolTip : RecipeToolTipObject
    +QueueCraft(recipe : CraftingRecipe) : void
    +DequeueCraft(craftingQueueObject : CraftingQueueObject) : void
    -CanBeCrafted(recipe : CraftingRecipe) : bool
    -CheckForRecipeUnlocks() : void
    -UpdateCraftingQueue() : void
    -UpdateUnlockedRecipes() : void
  }
  
  class CraftingRecipe <<ScriptableObject>>
  {
    +Input : itemStack[]
    +Output : itemStack
    +GatherComponent : GatherComponent
    +Duration : float
  }
  
  class CraftingQueueObject <<Interactable>> 
  {
    +Recipe : CraftingRecipe
    +PassedTime : float
    -connectedGameObject : GameObject
    -onClick : Action
    +Destroy()
  }
  
  class UnlockedRecipeObject <<Interactable>>
  {
    +Recipe : CraftingRecipe
    -connectedGameObject : GameObject
    -toolTip : RecipeToolTipObject
    +SetIsCraftable(isCraftable : bool) : void
  }
  
  class RecipeToolTipObject <<Updatable>> 
  {
    -toolTipTransform : RectTransform
    -costListParent : RectTransform
    -durationText : TextMeshProUGUI
    -headerText : TextMeshProUGUI
    -costListItem : GameObject
    -toolTipOffset : Vector3
    +SetActive(value : bool) : void
    +SetRecipe(recipe : CraftingRecipe) : void
  }
  
  GameManager *-- CraftingManager
  CraftingManager o-- CraftingRecipe
  CraftingManager *-- UnlockedRecipeObject
  CraftingManager *-- CraftingQueueObject
  CraftingManager *-- RecipeToolTipObject
  CraftingQueueObject o-- RecipeToolTipObject
}

package "Inventory System"
{
  class InventoryManager
  {
    -root : RectTransform
    -settings : GridSettings
    -inventory : GridInventory
    -elementGrid : SlotElement[,]
    -InstantiateGrid(_gridRes : Vector2Int, _gridSize : Vector2Int, tiles : Tile[,])
  }
  
  class SlotElement
  {
    -connectedTile : Tile
    -itemImage : Image
    -itemText : TextMeshProUGUI
    -OnTileAltered() : void
  }
  
  class GridSettings <<ScriptableObject>>
  {
    +Resolution : Vector2Int
  }

  class GridInventory implements IInventory
  {
    -itemGrid : Tile[]
  }
  
  class Tile
  {
    +OnAltered : event Action<ItemStack>
    -contents : ItemStack
    +SetContents() : void
    +ChangeValue(amount : int) : void
  }

  interface IInventory <<Service>>
  {
    +Add(itemStack : params ItemStack[]) : void
    +Remove(itemStack : params ItemStack[]) : void
    +Contains(itemStack : params ItemStack[]) : bool
  }
  
  struct ItemStack
  {
    +Type : ItemData
    +Amount : int
  }
  
  class ItemData
  {
    +Image : Sprite
  }
  
  GameManager *-- InventoryManager
  InventoryManager o-- GridSettings
  InventoryManager *-- SlotElement
  GridInventory *-- Tile
  SlotElement *-- Tile
  IInventory --> ItemStack
  ItemStack *-- ItemData
}

package "Interaction System"
{
  interface IInteractionManager <<Service>>
  {
    +Subscribe(element : IInteractable, key : RectTransform)
    +UnSubscribe(key : RectTransform)
  }

  class InteractionManager <<Updatable>> implements IInteractionManager
  {
    -subscribedElements : Dictionary<RectTransform, IInteractable>
    -clickedElement : IInteractable
    -hoveringElement : IInteractable
    -OverlapsWithElement(mousePos : Vector2, out interactable : IInteractable) : void
  }

  interface IInteractable
  {
    +OnEnter(mousePos : Vector2) : void
    +OnExit(mousePos : Vector2) : void
    +OnClick(mousePos : Vector2) : void
    +OnRelease(mousePos : Vector2) : void
    +Overlaps(mousePos : Vector2) : bool
  }
  
  abstract class BaseInteractable implements IInteractable
  {
    -element : RectTransform
    +Setup(element : RectTransform) : void
    +DisconnectInteractable() : void
  }
  
  GameManager *-- IInteractionManager
  InteractionManager o.. IInteractable
}

@enduml
@startuml

class GameManager
{
  -serivceLocator : ServiceLocator
  -inventoryManager : InventoryManager
  -tickManager : TickManager
  +Awake() : void
  +Start() : void
  +Update() : void
}

package "Service Locator"
{
  class ServiceLocator
  {
    -services : Dictionary<Type, IService>
    +Add(...) : void
    +Remove(...) : void
    +Get<T>() : void
  }
  
  interface IService
  
  GameManager *-- ServiceLocator
  ServiceLocator o.. IService
}

package "Tick System"
{
  class TickManager
  {
    -subscribed : List<IUpdatable> 
    +OnUpdate() : void
    +Add<T>(updatable : T) : T
  }
  
  interface IUpdatable
  
  GameManager *-- TickManager
  TickManager o.. IUpdatable
}

package "Gathering System"
{
  class GatherManager <<Updatable>>
  {
    -gatherInfo : GatherInfo
    -inventory : IInventory
  }

  class GatherInfo
  {
    -gatherItems : Dictionary<ItemData, GatherChance>
  }
  
  struct GatherChance
  {
    +gatherChancePercentage : float
    +maxStackSize : int
  }

  GameManager *-- GatherManager
  GatherManager *-- GatherInfo
  GatherInfo o-- GatherChance
}

package "Crafting System"
{
  class CraftingManager <<Updatable>>
  {
    -inventory : IInventory
    -lockedRecipes : List<CraftingRecipe>
    -unlockedRecipes : List<CraftingRecipe>
    -recipeQueue : Que<CraftingRecipe>
    +CanBeCrafted(recipe : CraftingRecipe) : bool
    +QueueCraft(recipe : CraftingRecipe) : void
    +Craft(recipe : CraftingRecipe) : void
    +CheckForRecipeUnlocks()
  }

  class CraftingRecipe <<ScriptableObject>>
  {
    +Input : itemStack[]
    +Output : itemStack[]
    +Duration : int
  
  }
  
  GameManager *-- CraftingManager
  CraftingManager o-- CraftingRecipe
}

package "Inventory System"
{
  class InventoryManager
  {
    -settings : GridSettings
    -inventory : GridInventory
    -root : RectTransform
    -elementGrid : SlotElement[,]
    -InstantiateGrid(_gridRes : Vector2Int, _gridSize : Vector2Int, tiles : Tile[,])
  }
  
  interface IInventory
  {
    +Add(itemStack : params ItemStack[]) : void
    +Remove(itemStack : params ItemStack[]) : void
    +Contains(itemStack : params ItemStack[]) : bool
  }
  
  class ItemData
  {
    +Image : Sprite
    +ItemName : string
  }
  
  struct ItemStack
  {
    +Type : ItemData
    +Amount : int
  }
  
  class GridInventory <<Service>> implements IInventory
  {
    -itemGrid : Tile[]
  }
  
  class Tile
  {
    +OnAltered : event Action<ItemStack>
    +OnValueChanged : event Action<int>
    +OnTypeChanged : event Action<ItemData>
    -contents : ItemStack
    +SetContents() : void
    +ChangeValue(amount : int) : void
    +CompareType(type : ItemData) : bool
    +Contains(amount : int) : bool
  }
  
  class SlotElement
  {
    -connectedTile : Tile
    -itemImage : Image
    -itemText : TextMeshProUGUI
    -OnTileAltered() : void
  }
  
  class ElementScaler
  {
    -Transform : RectTransform
    -Recovery : float
    +Scale(scale : float) void
    +Tick(deltaTime : float) : void
  }

  class GridSettings <<ScriptableObject>>
  {
    +Resolution : Vector2Int
    +Spacing : float
    +PopSizeMultiplier : float
    +PopLerpSpeed : float
  }
  
  GameManager *-- InventoryManager
  InventoryManager o-- GridSettings
  InventoryManager *-- SlotElement
  Tile *-- ItemStack
  ItemStack *-- ItemData
  GridInventory *-- Tile
  SlotElement *-- Tile
  SlotElement *-- ElementScaler
}

package "Interaction System"
{
  interface IInteractionManager <<Service>>
  {
    +Subscribe(element : IInteractable, key : RectTransform) : void
    +Unsubscribe(key : RectTransform) : void
    +CanvasToScreenPoint(point : Vector2) : Vector2
    +ScreenToCanvasPoint(point : Vector2) : Vector2
  }

  interface IInteractable
  {
    +OnClick(mousePos : Vector2) : void
    +OnRelease(mousePos : Vector2) : void
  }

  class InteractionManager <<Updatable>> implements IInteractionManager
  {
    -translator : CanvasTranslator
    -subscribedElements : Dictionary<RectTransform, IInteractable>
    -clickedElement : IInteractable
    -hoveringElement : IInteractable
  }
  
  abstract class BaseInteractable implements IInteractable
  {
    -element : RectTransform
    +BaseInteractable()
  }
  
  class CanvasTranslator
  {
    +CanvasToScreenPoint(point : Vector2) : Vector2
    +ScreenToCanvasPoint(point : Vector2) : Vector2
  }
  
  InteractionManager *-- CanvasTranslator
  InteractionManager o.. IInteractable
}

@enduml